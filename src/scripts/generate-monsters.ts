#!/usr/bin/env ts-node

import dotenv from 'dotenv';
dotenv.config({ path: '.env.local' });

import { config, validateConfig, estimateTotalCost } from '../config';
import { isDevelopment } from '../config';

async function main() {
  try {
    // Validate configuration
    validateConfig();
    
    console.log('üé≠ Folklore Monster Generator');
    console.log('=============================');
    
    // Display current settings
    console.log(`\nüìä Generation Settings:`);
    console.log(`   ‚Ä¢ Count: ${config.generation.count} monsters`);
    console.log(`   ‚Ä¢ Batch Size: ${config.generation.batchSize}`);
    console.log(`   ‚Ä¢ Image Generation: ${config.generation.enableImageGeneration ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ PDF Generation: ${config.generation.enablePDFGeneration ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ QA Review: ${config.quality.enableQAReview ? '‚úÖ' : '‚ùå'}`);
    
    console.log(`\nüé® Image Settings:`);
    console.log(`   ‚Ä¢ Model: ${config.dalle.model}`);
    console.log(`   ‚Ä¢ Size: ${config.quality.imageSize}`);
    console.log(`   ‚Ä¢ Quality: ${config.dalle.quality}`);
    
    // Estimate costs
    const estimatedCost = estimateTotalCost(config.generation.count);
    console.log(`\nüí∞ Estimated Cost: $${estimatedCost.toFixed(4)}`);
    
    // Development mode warnings
    if (isDevelopment()) {
      console.log(`\nüîß Development Mode:`);
      if (config.development.mockLLM) {
        console.log(`   ‚Ä¢ Mock LLM: ‚úÖ (using test responses)`);
      }
      if (config.development.mockImageGeneration) {
        console.log(`   ‚Ä¢ Mock Image Generation: ‚úÖ (skipping actual generation)`);
      }
    }
    
    console.log(`\nüöÄ Ready to generate ${config.generation.count} monster(s)!`);
    
    // TODO: Implement actual generation logic
    console.log(`\nüìù TODO: Implement generation pipeline with:`);
    console.log(`   ‚Ä¢ LoreAgent`);
    console.log(`   ‚Ä¢ StatBlockAgent`); 
    console.log(`   ‚Ä¢ CitationAgent`);
    console.log(`   ‚Ä¢ ArtPromptAgent`);
    console.log(`   ‚Ä¢ QAAgent`);
    console.log(`   ‚Ä¢ PDFAgent`);
    
  } catch (error) {
    console.error('‚ùå Configuration Error:', (error as Error).message);
    process.exit(1);
  }
}

// Run the script
if (require.main === module) {
  main().catch(console.error);
}

export { main as generateMonsters }; 